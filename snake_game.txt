#include <SFML/Graphics.hpp>
#include <SFML/Audio.hpp>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <iostream>

using namespace sf;
using namespace std;

const int WIDTH = 800;
const int HEIGHT = 600;
const int SIZE = 20;

struct SnakeSegment {
    int x, y;
    SnakeSegment(int x, int y) : x(x), y(y) {}
};

enum Direction { UP, DOWN, LEFT, RIGHT };

class SnakeGame {
private:
    RenderWindow window;
    vector<SnakeSegment> snake;
    Direction dir;
    Vector2i food;
    Clock clock;
    float delay = 0.15f;
    int score = 0;
    Font font;
    Text scoreText;
    SoundBuffer eatBuffer, dieBuffer;
    Sound eatSound, dieSound;
    bool gameOver = false;

public:
    SnakeGame() : window(VideoMode(WIDTH, HEIGHT), "üêç Snake Game with SFML") {
        window.setFramerateLimit(60);
        dir = RIGHT;
        snake.push_back(SnakeSegment(10, 10));
        srand(time(0));
        spawnFood();

        if (!font.loadFromFile("arial.ttf")) {
            cerr << "Failed to load font\n";
        }

        scoreText.setFont(font);
        scoreText.setCharacterSize(24);
        scoreText.setFillColor(Color::White);
        scoreText.setPosition(10, 10);

        // Load sounds
        if (!eatBuffer.loadFromFile("assets/eat.wav") ||
            !dieBuffer.loadFromFile("assets/die.wav")) {
            cerr << "Sound files not loaded!\n";
        }
        eatSound.setBuffer(eatBuffer);
        dieSound.setBuffer(dieBuffer);
    }

    void spawnFood() {
        food.x = rand() % (WIDTH / SIZE);
        food.y = rand() % (HEIGHT / SIZE);
    }

    void run() {
        while (window.isOpen()) {
            handleEvents();

            if (clock.getElapsedTime().asSeconds() >= delay && !gameOver) {
                clock.restart();
                update();
            }

            render();
        }
    }

private:
    void handleEvents() {
        Event e;
        while (window.pollEvent(e)) {
            if (e.type == Event::Closed)
                window.close();
        }

        if (Keyboard::isKeyPressed(Keyboard::Up) && dir != DOWN)
            dir = UP;
        else if (Keyboard::isKeyPressed(Keyboard::Down) && dir != UP)
            dir = DOWN;
        else if (Keyboard::isKeyPressed(Keyboard::Left) && dir != RIGHT)
            dir = LEFT;
        else if (Keyboard::isKeyPressed(Keyboard::Right) && dir != LEFT)
            dir = RIGHT;
    }

    void update() {
        SnakeSegment head = snake[0];

        switch (dir) {
            case UP: head.y--; break;
            case DOWN: head.y++; break;
            case LEFT: head.x--; break;
            case RIGHT: head.x++; break;
        }

        // Check wall or self collision
        if (head.x < 0 || head.y < 0 || head.x * SIZE >= WIDTH || head.y * SIZE >= HEIGHT || checkCollision(head)) {
            dieSound.play();
            gameOver = true;
            return;
        }

        // Move snake
        snake.insert(snake.begin(), head);

        // Check food
        if (head.x == food.x && head.y == food.y) {
            eatSound.play();
            score++;
            spawnFood();
            if (score % 5 == 0 && delay > 0.05f)
                delay -= 0.01f;  // increase speed
        } else {
            snake.pop_back();
        }
    }

    bool checkCollision(SnakeSegment& head) {
        for (int i = 1; i < snake.size(); i++) {
            if (head.x == snake[i].x && head.y == snake[i].y)
                return true;
        }
        return false;
    }

    void render() {
        window.clear(Color::Black);

        // Draw snake
        RectangleShape rect(Vector2f(SIZE - 2, SIZE - 2));
        rect.setFillColor(Color::Green);
        for (auto& s : snake) {
            rect.setPosition(s.x * SIZE, s.y * SIZE);
            window.draw(rect);
        }

        // Draw food
        rect.setFillColor(Color::Red);
        rect.setPosition(food.x * SIZE, food.y * SIZE);
        window.draw(rect);

        // Draw score
        scoreText.setString("Score: " + to_string(score));
        window.draw(scoreText);

        // Game over
        if (gameOver) {
            Text over("Game Over!", font, 50);
            over.setFillColor(Color::Yellow);
            over.setPosition(WIDTH / 3, HEIGHT / 3);
            window.draw(over);
        }

        window.display();
    }
};

int main() {
    SnakeGame game;
    game.run();
    return 0;
}
